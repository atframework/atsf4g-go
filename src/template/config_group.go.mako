## -*- coding: utf-8 -*-
<%!
import time
%><%namespace name="pb_loader" module="pb_loader"/>
// Copyright ${time.strftime("%Y")} xresloader. All rights reserved.
// Generated by xres-code-generator, please don't edit it
//

package atframework_component_config_generate_config

import (
	"log/slog"
	custom_index_type "github.com/atframework/atsf4g-go/component-config/custom_index"
	public_protocol_config "github.com/atframework/atsf4g-go/component-protocol-public/config/protocol/config"
)

type ConfigCallback interface {
	LoadFile(string) ([]byte, error)
	GetLogger() *slog.Logger
	OnLoaded(*ConfigGroup) error
}

type ConfigGroup struct {
% for pb_msg in pb_set.generate_message:
	% for loader in pb_msg.loaders:
	${loader.get_go_pb_name()} ConfigSet${loader.get_go_pb_name()};
	% endfor
% endfor

// 自定义索引由此开始 在config_custom_group_field.go内定义 需要在ExcelConfigCallbackOnLoad内初始化

% for block_file in pb_set.get_custom_blocks("custom_config_group"):
<%include file="${block_file}" />
% endfor
}

func (configGroup *ConfigGroup) Init(callback ConfigCallback) (err error) {
% for pb_msg in pb_set.generate_message:
	% for loader in pb_msg.loaders:
	if err = configGroup.${loader.get_go_pb_name()}.Init(callback); err != nil {
		return
	}
	% endfor
% endfor
	err = callback.OnLoaded(configGroup)
	return
}

% for pb_msg in pb_set.generate_message:
// ${loader.get_go_pb_name()}
	% for loader in pb_msg.loaders:
		% for code_index in loader.code.indexes:
			% if code_index.is_list():
func Get${loader.get_go_pb_name()}By${pb_loader.MakoToCamelName(code_index.name)}(configGroup *ConfigGroup, ${code_index.get_go_key_decl()}) []*public_protocol_config.${loader.get_go_pb_name()} {
			% else:
func Get${loader.get_go_pb_name()}By${pb_loader.MakoToCamelName(code_index.name)}(configGroup *ConfigGroup, ${code_index.get_go_key_decl()}) *public_protocol_config.${loader.get_go_pb_name()} {
			% endif
	if configGroup == nil {
		return nil
	}
	return configGroup.${loader.get_go_pb_name()}.GetBy${pb_loader.MakoToCamelName(code_index.name)}(${code_index.get_go_key_params()})
}
func Get${loader.get_go_pb_name()}AllOf${pb_loader.MakoToCamelName(code_index.name)}(configGroup *ConfigGroup) *IndexContainer_${loader.get_go_pb_name()}_${code_index.name} {
	if configGroup == nil {
		return nil
	}
	return configGroup.${loader.get_go_pb_name()}.GetAllOf${pb_loader.MakoToCamelName(code_index.name)}()
}
			% if code_index.is_list():
func (configGroup *ConfigGroup) Get${loader.get_go_pb_name()}By${pb_loader.MakoToCamelName(code_index.name)}(${code_index.get_go_key_decl()}) []*public_protocol_config.${loader.get_go_pb_name()} {
			% else:
func (configGroup *ConfigGroup) Get${loader.get_go_pb_name()}By${pb_loader.MakoToCamelName(code_index.name)}(${code_index.get_go_key_decl()}) *public_protocol_config.${loader.get_go_pb_name()} {
			% endif
	if configGroup == nil {
		return nil
	}
	return configGroup.${loader.get_go_pb_name()}.GetBy${pb_loader.MakoToCamelName(code_index.name)}(${code_index.get_go_key_params()})
}
func (configGroup *ConfigGroup) Get${loader.get_go_pb_name()}AllOf${pb_loader.MakoToCamelName(code_index.name)}() *IndexContainer_${loader.get_go_pb_name()}_${code_index.name} {
	if configGroup == nil {
		return nil
	}
	return configGroup.${loader.get_go_pb_name()}.GetAllOf${pb_loader.MakoToCamelName(code_index.name)}()
}

		% endfor
	% endfor
% endfor