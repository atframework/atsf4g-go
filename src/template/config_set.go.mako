## -*- coding: utf-8 -*-
<%!
import time
%><%namespace name="pb_loader" module="pb_loader"/>
// Copyright ${time.strftime("%Y")} xresloader. All rights reserved.
// Generated by xres-code-generator, please don't edit it
//

package atframework_component_config_generate_config

import (
	public_protocol_config "github.com/atframework/atsf4g-go/component-protocol-public/config/protocol/config"
	xresloader_pb_header "github.com/xresloader/xresloader/protocol/config"
	"google.golang.org/protobuf/proto"
)

% for code_index in loader.code.indexes:
	% if not code_index.is_vector():
type configSet${loader.get_go_pb_name()}Key_${code_index.name} struct {
    	% for field in code_index.fields:
	${pb_loader.MakoToCamelName(field.name)} ${pb_loader.MakoPbMsgGetPbFieldGoType(field)}
    	% endfor
}
	% endif
% endfor

% for code_index in loader.code.indexes:
// index: ${code_index.name}
	% if code_index.is_vector():
		% if code_index.is_list():
type IndexContainer_${loader.get_go_pb_name()}_${code_index.name} [][]*public_protocol_config.${loader.get_go_pb_name()}
		% else:
type IndexContainer_${loader.get_go_pb_name()}_${code_index.name} []*public_protocol_config.${loader.get_go_pb_name()}
		% endif
	% else:
		% if code_index.is_list():
type IndexContainer_${loader.get_go_pb_name()}_${code_index.name} map[configSet${loader.get_go_pb_name()}Key_${code_index.name}][]*public_protocol_config.${loader.get_go_pb_name()}
		% else:
type IndexContainer_${loader.get_go_pb_name()}_${code_index.name} map[configSet${loader.get_go_pb_name()}Key_${code_index.name}]*public_protocol_config.${loader.get_go_pb_name()}
		% endif
	% endif
% endfor

type ConfigSet${loader.get_go_pb_name()} struct {
    fileList []string
    callBack ConfigCallback

    dataList []*public_protocol_config.${loader.get_go_pb_name()}

% for code_index in loader.code.indexes:
	% if code_index.is_vector():
	configIndexContainer_${code_index.name} IndexContainer_${loader.get_go_pb_name()}_${code_index.name}
	% else:
	configIndexContainer_${code_index.name} IndexContainer_${loader.get_go_pb_name()}_${code_index.name}
	% endif
% endfor
}

func (configSet *ConfigSet${loader.get_go_pb_name()}) Init(callBack ConfigCallback) error {
%for one_file_path in loader.code.file_path:
    configSet.fileList = append(configSet.fileList, "${one_file_path}")
%endfor
	configSet.callBack = callBack
% for code_index in loader.code.indexes:
	% if code_index.is_vector():
		configSet.configIndexContainer_${code_index.name} = make(IndexContainer_${loader.get_go_pb_name()}_${code_index.name}, 0)
	% else:
		configSet.configIndexContainer_${code_index.name} = make(IndexContainer_${loader.get_go_pb_name()}_${code_index.name})
	% endif
% endfor
	for _, fileName := range configSet.fileList {
		content, err := configSet.callBack.LoadFile(fileName)
		if err != nil {
			return err
		}
		dataBlocks := xresloader_pb_header.XresloaderDatablocks{}
		err = proto.Unmarshal(content, &dataBlocks)
		if err != nil {
			return err
		}
		for index := range dataBlocks.DataBlock {
			excelItemType := &public_protocol_config.${loader.get_go_pb_name()}{}
			proto.Unmarshal(dataBlocks.DataBlock[index], excelItemType)
			configSet.mergeData(excelItemType)
		}
		configSet.callBack.GetLogger().Info("[EXCEL] ${loader.get_go_pb_name()} load success", "row_size", len(configSet.dataList))
	}
    return nil
}

func (configSet *ConfigSet${loader.get_go_pb_name()}) mergeData(data *public_protocol_config.${loader.get_go_pb_name()}) {
	configSet.dataList = append(configSet.dataList, data)

% for code_index in loader.code.indexes:
  	// index: ${code_index.name}
	 {
	% if code_index.is_vector():
		% for field in code_index.fields:
		key := data.${pb_loader.MakoToCamelName(field.name)}
		if key < 0 {
			configSet.callBack.GetLogger().Error("[EXCEL] merge_data() key for index < 0, return",
		% for field in code_index.fields:
				"${pb_loader.MakoToCamelName(field.name)}",
				data.${pb_loader.MakoToCamelName(field.name)},
		% endfor
				"index",
				"ConfigSet${loader.get_go_pb_name()}")
			return
		}
		if len(configSet.configIndexContainer_${code_index.name}) <= int(key) {
			configSet.configIndexContainer_${code_index.name} = append(configSet.configIndexContainer_${code_index.name}, make(IndexContainer_${loader.get_go_pb_name()}_${code_index.name}, int(key)+1-len(configSet.configIndexContainer_${code_index.name}))...)
		}
		% endfor
	% else:
		key := configSet${loader.get_go_pb_name()}Key_${code_index.name}{
		% for field in code_index.fields:
			${pb_loader.MakoToCamelName(field.name)}: ${pb_loader.MakoPbMsgGetPbFieldGoType(field)}(data.${pb_loader.MakoToCamelName(field.name)}),
		% endfor
		}
		if _, ok := configSet.configIndexContainer_${code_index.name}[key]; ok {
			configSet.callBack.GetLogger().Error("[EXCEL] merge_data() key for index is already exists, we will cover it with the newer value",
		% for field in code_index.fields:
				"${pb_loader.MakoToCamelName(field.name)}",
				data.${pb_loader.MakoToCamelName(field.name)},
		% endfor
				"index",
				"ConfigSet${loader.get_go_pb_name()}")
		}
	% endif
	% if code_index.is_list():
		configSet.configIndexContainer_${code_index.name}[key] = append(configSet.configIndexContainer_${code_index.name}[key], data)
	% else:
		configSet.configIndexContainer_${code_index.name}[key] = data
	% endif
	}
% endfor
}

% for code_index in loader.code.indexes:
// index: ${code_index.name}
	% if code_index.is_list():
func (configSet *ConfigSet${loader.get_go_pb_name()}) GetBy${pb_loader.MakoToCamelName(code_index.name)}(${code_index.get_go_key_decl()}) []*public_protocol_config.${loader.get_go_pb_name()} {
	% else:
func (configSet *ConfigSet${loader.get_go_pb_name()}) GetBy${pb_loader.MakoToCamelName(code_index.name)}(${code_index.get_go_key_decl()}) *public_protocol_config.${loader.get_go_pb_name()} {
	% endif
	% if code_index.is_vector():
		% for field in code_index.fields:
	key := ${pb_loader.MakoToCamelName(field.name)}
	if key < 0 {
		configSet.callBack.GetLogger().Error("[EXCEL] () GetBy${pb_loader.MakoToCamelName(code_index.name)} with key for index < 0",
			% for field in code_index.fields:
			"${pb_loader.MakoToCamelName(field.name)}",
			${pb_loader.MakoToCamelName(field.name)},
			% endfor
			"index",
			"ConfigSet${loader.get_go_pb_name()}")
		return nil
	}
	if int(key) >= len(configSet.configIndexContainer_${code_index.name}) {
		configSet.callBack.GetLogger().Error("[EXCEL] () GetBy${pb_loader.MakoToCamelName(code_index.name)} with key for index >= Container Size",
			% for field in code_index.fields:
			"${pb_loader.MakoToCamelName(field.name)}",
			${pb_loader.MakoToCamelName(field.name)},
			% endfor
			"Container Size",
			len(configSet.configIndexContainer_${code_index.name}),
			"index",
			"ConfigSet${loader.get_go_pb_name()}")
		return nil
	}
	return configSet.configIndexContainer_${code_index.name}[int(key)]
		% endfor
	% else:
	key := configSet${loader.get_go_pb_name()}Key_${code_index.name}{
	% for field in code_index.fields:
		${pb_loader.MakoToCamelName(field.name)}: ${pb_loader.MakoToCamelName(field.name)},
	% endfor
	}
	if value, ok := configSet.configIndexContainer_${code_index.name}[key]; ok {
		return value
	}
	%   if not code_index.allow_not_found:
	configSet.callBack.GetLogger().Error("[EXCEL] () GetBy${pb_loader.MakoToCamelName(code_index.name)} with key not found",
		% for field in code_index.fields:
		"${pb_loader.MakoToCamelName(field.name)}",
		${pb_loader.MakoToCamelName(field.name)},
		% endfor
		"index",
		"ConfigSet${loader.get_go_pb_name()}")
	%   endif
	return nil
	% endif
}

func (configSet *ConfigSet${loader.get_go_pb_name()}) GetAllOf${pb_loader.MakoToCamelName(code_index.name)}() *IndexContainer_${loader.get_go_pb_name()}_${code_index.name} {
	return &configSet.configIndexContainer_${code_index.name}
}
% endfor