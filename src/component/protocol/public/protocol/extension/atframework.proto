syntax = "proto3";

option optimize_for = SPEED;
// option optimize_for = LITE_RUNTIME;
// option optimize_for = CODE_SIZE;
// --cpp_out=lite:,--cpp_out=
option cc_enable_arenas = true;

package atframework;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/descriptor.proto";

// 只能配置在 com.const.proto 这个文件里有效
extend google.protobuf.FileOptions {
  ConstSettingsType CONST_SETTINGS = 3271;  // 自定义配置
}

message ConstSettingsType {
  string rpc_version = 1;  // RPC协议版本号
}

option (CONST_SETTINGS) = {
  rpc_version: "0.1.0"
};

message DispatcherOptions {
  string module_name = 101;                     // module name
  string api_name = 102;                        // api name
  repeated string descriptions = 103;           // descriptions
  repeated string bussiness_module_name = 104;  // bussiness module name used by specific service instance

  google.protobuf.Duration timeout = 201;         // custom timeout
  google.protobuf.Duration timeout_offset = 202;  // custom timeout offset
  int32 timeout_default_multiple = 203;           // custom timeout multiple

  // functional
  // 标记把涉及的路由对象转移到快队列并触发保存(需要dispatcher层和task_action_base层支持)
  bool mark_fast_save = 301;
  // 是否是路由系统rpc，生成的接口使用路由系统参数(需要generator支持)
  bool mark_wait_save = 302;
  bool router_rpc = 303;
  // RPC接口是否需要附带用户信息,如果router_rpc同时设为true则会走路由rpc规则，但是认为路由对象的zone_id和object_id和用户ID一致
  bool user_rpc = 304;
  bool no_cache = 305;
  bool allow_no_wait = 306;                         // 是否允许不等待回包
  repeated string warning_log_response_code = 307;  // 以下错误码使用warning log而不是error log
  repeated string info_log_response_code = 308;     // 以下错误码使用info log而不是error log
  bool router_ignore_offline = 309;                 // 路由RPC忽略路由对象不存在
  bool allow_ignore_discovery = 310;                // RPC请求允许忽略服务发现
  bool enable_broadcast = 311;                      // 是否启用广播接口
}

message JsonOptions {
  string alias_key_name = 1;  // （反射）json key 别名
}

extend google.protobuf.MethodOptions {
  DispatcherOptions rpc_options = 3271;  // extension
}

extend google.protobuf.FieldOptions {
  DispatcherOptions dispatcher_options = 3271;  // 自定义配置
  JsonOptions field_json_options = 3272;        // Json反射相关
}

message ServiceOptions {
  string module_name = 101;            // module name
  string service_name = 102;           // service name
  repeated string descriptions = 103;  // descriptions
}

extend google.protobuf.ServiceOptions {
  ServiceOptions service_options = 3271;  // 自定义配置
}

// ============================= 内部RPC协议共享 =============================
message RpcRequestMeta {
  string version = 1;  // 协议版本号

  string caller = 11;  // 请求方服务名
  string callee = 12;  // 被调方服务名

  string rpc_name = 21;  // 调度分发名称: <ServiceFullName>.<MethodName>
  string type_url = 22;  // 类型地址

  google.protobuf.Timestamp caller_timestamp = 33;
}

message RpcResponseMeta {
  string version = 1;  // 协议版本号

  string rpc_name = 21;  // 调度分发名称: <ServiceFullName>.<MethodName>
  string type_url = 22;  // 类型地址

  uint64 caller_node_id = 31;
  string caller_node_name = 32;
  google.protobuf.Timestamp caller_timestamp = 33;
}

message RpcStreamMeta {
  string version = 1;  // 协议版本号

  string caller = 11;  // 请求方服务名
  string callee = 12;  // 被调方服务名

  string rpc_name = 21;  // 调度分发名称: <ServiceFullName>.<MethodName>
  string type_url = 22;  // 类型地址

  google.protobuf.Timestamp caller_timestamp = 33;
}

// RpcTraceSpan follows opentracing and opentelemetry.
// We must keep these declares effectively when converting to opentelemetry::common::AttributeValue .
// @see https://github.com/open-telemetry/opentelemetry-proto/blob/master/opentelemetry/proto/trace/v1/trace.proto
// @see https://opentelemetry.io
// @see https://opentracing.io/specification/
// @see https://github.com/open-telemetry/opentelemetry-cpp/blob/main/api/include/opentelemetry/common/attribute_value.h

message AnyValue {
  // The value is one of the listed fields. It is valid for all values to be unspecified
  // in which case this AnyValue is considered to be "null".
  oneof value {
    string string_value = 1;
    bool bool_value = 2;
    int64 int_value = 3;
    double double_value = 4;
    ArrayValue array_value = 5;
    KeyValueList kvlist_value = 6;
    bytes bytes_value = 7;
  }
}

// ArrayValue is a list of AnyValue messages. We need ArrayValue as a message
// since oneof in AnyValue does not allow repeated fields.
message ArrayValue {
  // Array of values. The array may be empty (contain 0 elements).
  repeated AnyValue values = 1;
}

// KeyValueList is a list of KeyValue messages. We need KeyValueList as a message
// since `oneof` in AnyValue does not allow repeated fields. Everywhere else where we need
// a list of KeyValue messages (e.g. in Span) we use `repeated KeyValue` directly to
// avoid unnecessary extra wrapping (which slows down the protocol). The 2 approaches
// are semantically equivalent.
message KeyValueList {
  // A collection of key/value pairs of key-value pairs. The list may be empty (may
  // contain 0 elements).
  map<string, AnyValue> values = 1;
}

message AttributeStringList {
  repeated string values = 1;
}

message AttributeBoolList {
  repeated bool values = 1;
}

message AttributeIntList {
  repeated int64 values = 1;
}

message AttributeDoubleList {
  repeated double values = 1;
}

message AttributeBytesList {
  repeated bytes values = 1;
}

message AttributeValue {
  // The value is one of the listed fields. It is valid for all values to be unspecified
  // in which case this AnyValue is considered to be "null".
  oneof value {
    string string_value = 1;
    bool bool_value = 2;
    int64 int_value = 3;
    double double_value = 4;
    bytes bytes_value = 5;
    // AttributeStringList string_list = 6; // To reduce the low performance calls, disable string list here
    AttributeBoolList bool_list = 7;
    AttributeIntList int_list = 8;
    AttributeDoubleList double_list = 9;
    // AttributeBytesList bytes_list = 10; // To reduce the low performance calls, disable bytes list here
  }
}

message RpcTraceSpan {
  string name = 1;
  bytes trace_id = 2;  // Every span in a trace shares this ID.
  bytes span_id = 3;   // The ID for a particular span. This may or may not be the same as the trace id.
  // This is an optional ID that will only be present on child spans. That is the span without a
  bytes parent_span_id = 4;
  // parent id is considered the root of the trace.

  enum SpanKind {
    // Unspecified. Do NOT use as default.
    // Implementations MAY assume SpanKind to be INTERNAL when receiving UNSPECIFIED.
    SPAN_KIND_UNSPECIFIED = 0;

    // Indicates that the span represents an internal operation within an application,
    // as opposed to an operation happening at the boundaries. Default value.
    SPAN_KIND_INTERNAL = 1;

    // Indicates that the span covers server-side handling of an RPC or other
    // remote network request.
    SPAN_KIND_SERVER = 2;

    // Indicates that the span describes a request to some remote service.
    SPAN_KIND_CLIENT = 3;

    // Indicates that the span describes a producer sending a message to a broker.
    // Unlike CLIENT and SERVER, there is often no direct critical path latency relationship
    // between producer and consumer spans. A PRODUCER span ends when the message was accepted
    // by the broker while the logical processing of the message might span a much longer time.
    SPAN_KIND_PRODUCER = 4;

    // Indicates that the span describes consumer receiving a message from a broker.
    // Like the PRODUCER kind, there is often no direct critical path latency relationship
    // between producer and consumer spans.
    SPAN_KIND_CONSUMER = 5;
  }

  // Distinguishes between spans generated in a particular context. For example,
  // two spans with the same name may be distinguished using `CLIENT` (caller)
  // and `SERVER` (callee) to identify queueing latency associated with the span.
  SpanKind kind = 6;

  map<string, AttributeValue> attributes = 9;

  // Ignore this trace by dynamic policy of user
  bool dynamic_ignore = 10;
}

message RpcForward {
  // 转发跳数，用于控制回环。会使用路由系统的ttl控制
  uint32 ttl = 1;
  // 透明转发:
  // 当启用透明转发时，转发目标获取的来源会是原始调用者，回包也会回给原始调用者。
  // 否则转发目标获取的来源会是当前任务，回包也会回给当前任务，并由当前任务回包。
  bool transparent = 2;

  uint64 forward_for_node_id = 11;
  string forward_for_node_name = 12;
  uint64 forward_for_source_task_id = 13;
  uint64 forward_for_sequence = 14;
}

// ============================= Dispatchers =============================
// -----------------------------    SSMsg    -----------------------------

message SSRouterHead {
  uint64 router_source_node_id = 1;    // 路由协议原始发起者的BUS ID
  string router_source_node_name = 2;  // TODO: 暂未接入按服务实例名字路由，当前只是个hint
  uint64 router_version = 3;
  uint32 router_transfer_ttl = 4;  // 路由消息转发跳数

  // 路由对象信息
  uint32 object_type_id = 21;  // 每种路由对象都要有自己的类型ID（router_manager_set根据这个来区分走哪个路由对象管理器）
  uint64 object_inst_id = 22;  // 每个路由对象的唯一实例ID
  uint32 object_zone_id = 23;  // 每个路由对象的大区ID
}

// 协议包头
message SSMsgHead {
  // 通用数据
  sint32 error_code = 1;
  int64 timestamp = 2;
  uint64 sequence = 3;
  int32 op_type = 4;

  sint64 external_error_code = 8;
  string external_error_message = 9;

  // 通道和任务信息
  uint64 node_id = 11;
  string node_name = 12;
  uint64 source_task_id = 13;
  uint64 destination_task_id = 14;

  // 路由系统信息
  SSRouterHead router = 21;

  // 新RPC接口的meta信息
  oneof rpc_type {
    RpcRequestMeta rpc_request = 31;
    RpcResponseMeta rpc_response = 32;
    RpcStreamMeta rpc_stream = 33;
  }
  RpcTraceSpan rpc_trace = 34;  // 用于链路追踪
  RpcForward rpc_forward = 35;  // RPC转发

  // 玩家标识
  uint64 player_user_id = 101;  // 如果涉及玩家此项必需
  string player_open_id = 102;  // 此项可选
  uint32 player_zone_id = 103;  // 如果涉及玩家此项必需
}

// 协议包
message SSMsg {
  SSMsgHead head = 1;
  bytes body_bin = 3;
}

// -----------------------------    CSMsg    -----------------------------

// 协议包头
message CSMsgHead {
  // 通用结构
  sint32 error_code = 1;
  int64 timestamp = 2;  // lua 5.3 才开始支持int64
  uint64 client_sequence = 3;
  uint64 server_sequence = 4;   // 服务器生成的用户消息序号
  uint64 session_sequence = 5;  // 服务器生成的Session消息序号
  int32 op_type = 6;            // @see EnMsgOpType

  sint64 external_error_code = 8;
  string external_error_message = 9;

  // 通道和任务信息
  uint64 session_node_id = 11;
  string session_node_name = 12;
  uint64 session_id = 13;

  // 新RPC接口的meta信息
  oneof rpc_type {
    RpcRequestMeta rpc_request = 31;
    RpcResponseMeta rpc_response = 32;
    RpcStreamMeta rpc_stream = 33;
  }
  RpcTraceSpan rpc_trace = 34;  // 用于链路追踪
}

// 协议包
message CSMsg {
  CSMsgHead head = 1;
  bytes body_bin = 3;
}
