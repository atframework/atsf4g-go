syntax = "proto3";

package atbus.protocol;

option go_package = "github.com/atframework/libatbus-go/protocol";
option optimize_for = SPEED;
// option optimize_for = LITE_RUNTIME;
// option optimize_for = CODE_SIZE;
// --cpp_out=lite:,--cpp_out=
option cc_enable_arenas = true;

enum ATBUS_PROTOCOL_CONST {
  option allow_alias = true;
  ATBUS_PROTOCOL_CONST_UNKNOWN = 0;
  ATBUS_PROTOCOL_VERSION = 3;
  ATBUS_PROTOCOL_MINIMAL_VERSION = 3; // minimal protocol version supported
}

enum ATBUS_FORWARD_DATA_FLAG_TYPE {
  FORWARD_DATA_FLAG_NONE = 0;
  // all flags must be power of 2
  FORWARD_DATA_FLAG_REQUIRE_RSP = 1;
}

enum ATBUS_ACCESS_DATA_ALGORITHM_TYPE {
  ATBUS_ACCESS_DATA_ALGORITHM_HMAC_SHA256 = 0;
}

enum ATBUS_CRYPTO_ALGORITHM_TYPE {
  ATBUS_CRYPTO_ALGORITHM_NONE = 0;
  ATBUS_CRYPTO_ALGORITHM_XXTEA = 1;
  ATBUS_CRYPTO_ALGORITHM_AES_128_CBC = 11; // PKCS#7
  ATBUS_CRYPTO_ALGORITHM_AES_192_CBC = 12; // PKCS#7
  ATBUS_CRYPTO_ALGORITHM_AES_256_CBC = 13; // PKCS#7
  ATBUS_CRYPTO_ALGORITHM_AES_128_GCM = 14; // AEAD
  ATBUS_CRYPTO_ALGORITHM_AES_192_GCM = 15; // AEAD
  ATBUS_CRYPTO_ALGORITHM_AES_256_GCM = 16; // AEAD

  ATBUS_CRYPTO_ALGORITHM_CHACHA20 = 31;
  ATBUS_CRYPTO_ALGORITHM_CHACHA20_POLY1305_IETF = 32;  // AEAD
  ATBUS_CRYPTO_ALGORITHM_XCHACHA20_POLY1305_IETF = 33; // AEAD
}

enum ATBUS_CRYPTO_KEY_EXCHANGE_TYPE {
  ATBUS_CRYPTO_KEY_EXCHANGE_NONE = 0;
  ATBUS_CRYPTO_KEY_EXCHANGE_X25519 = 1;    // x25519
  ATBUS_CRYPTO_KEY_EXCHANGE_SECP256R1 = 2; // secp256r1, p-256
  ATBUS_CRYPTO_KEY_EXCHANGE_SECP384R1 = 3; // secp384r1, p-384
  ATBUS_CRYPTO_KEY_EXCHANGE_SECP521R1 = 4; // secp521r1, p-521
}

message crypto_handshake_data {
  uint64 sequence = 1; // used to prevent duplication
  ATBUS_CRYPTO_KEY_EXCHANGE_TYPE type = 2;
  repeated ATBUS_CRYPTO_ALGORITHM_TYPE algorithms =
      3; // available cryptographic algorithms
  bytes params = 4;
  bytes public_key = 5;
}

message custom_command_argv { bytes arg = 1; }

message custom_command_data {
  uint64 from = 1;
  repeated custom_command_argv commands = 2;
  access_data access_key = 3;
}

message forward_data {
  uint64 from = 1;
  uint64 to = 2;
  repeated uint64 router = 3;
  bytes content = 4;
  uint32 flags = 5;
}

message access_data {
  ATBUS_ACCESS_DATA_ALGORITHM_TYPE algorithm = 1;
  int64 timestamp = 2; // unix timestamp

  // 128bits nonce is enough
  // - TLS 1.3: 96 bits
  // - IPSec:   64 bits
  // - JWT:     128 bits
  // - UUID v4: 128 bits
  uint64 nonce1 = 3; // random
  uint64 nonce2 = 4; // random

  // signature=HMAC.sha256("<timestamp>:<nonce1>-<nonce2>:<register_data.bus_id>:{register_data.crypto_handshake.type}:{sha256(register_data.crypto_handshake.params+register_data.crypto_handshake.public_key)}")
  // signature=HMAC.sha256("<timestamp>:<nonce1>-<nonce2>:<register_data.bus_id>")
  // without encryption
  // signature=HMAC.sha256("<timestamp>:<nonce1>-<nonce2>:<custom_command_data.from>:{sha256(custom_command_data.commands.arg)}")
  // abs(timestamp-current time)<=300
  repeated bytes signature = 9;
}

message channel_data { string address = 1; }

message node_data {
  uint64 bus_id = 1;
  bool overwrite = 2;
  bool flags = 3;
  uint64 children_id_mask = 4;
  uint64 children_id_prefix = 5;
  repeated node_data children = 6;
}

message node_tree { repeated node_data nodes = 1; }

message ping_data {
  int64 time_point = 1;
  crypto_handshake_data crypto_handshake = 2;
}

message subnet_range {
  uint64 id_prefix = 1;
  uint32 mask_bits = 2; // suffix
}

message register_data {
  uint64 bus_id = 1;
  int32 pid = 2;
  string hostname = 3;
  repeated channel_data channels = 4;
  uint32 flags = 7;
  access_data access_key = 8;
  repeated subnet_range subnets = 9;
  string hash_code = 10;
  crypto_handshake_data crypto_handshake = 11;
}

message connection_data { channel_data address = 1; }

message message_head {
  int32 version = 1;
  int32 type = 2;
  sint32 ret = 3;
  uint64 sequence = 4;
  uint64 source_bus_id = 5;

  // body size without padding
  uint64 body_size = 9;
}

message message_body {
  oneof message_type {
    custom_command_data custom_command_req = 11;
    custom_command_data custom_command_rsp = 12;
    forward_data data_transform_req = 13;
    forward_data data_transform_rsp = 14;
    node_tree node_sync_req = 15;
    node_tree node_sync_rsp = 16;
    register_data node_register_req = 17;
    register_data node_register_rsp = 18;
    connection_data node_connect_sync = 20;
    ping_data node_ping_req = 21;
    ping_data node_pong_rsp = 22;
  }
}
